<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.fank243.springboot</groupId>
        <artifactId>springboot</artifactId>
        <version>1.0.0</version>
    </parent>
    <artifactId>fank243-admin</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>

    <name>fank243-admin</name>
    <description>后台管理</description>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>

        <maven.install.skip>true</maven.install.skip>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.fank243.springboot</groupId>
            <artifactId>fank243-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fank243.springboot</groupId>
            <artifactId>fank243-3rd</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-freemarker</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-spring</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>

            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <configuration>
                    <dockerHost>${docker.host}</dockerHost>
                    <certPath>${docker.cert.path}</certPath>
                    <registry>${docker.registry}</registry>
                    <!--认证配置,用于私有registry认证,如果忘记了可以去阿里的registry查看-->
                    <authConfig>
                        <push>
                            <username>${docker.username}</username>
                            <password>${docker.password}</password>
                        </push>
                    </authConfig>
                    <images>
                        <image>
                            <!--容器名称-->
                            <alias>${project.artifactId}</alias>
                            <!--镜像名称-->
                            <name>${docker.namespaces}/${project.artifactId}:${project.version}_${timestamp}</name>
                            <build>
                                <!--JAVA镜像-->
                                <from>${docker.from}</from>
                                <assembly>
                                    <descriptorRef>artifact</descriptorRef>
                                    <inline>
                                        <dependencySets>
                                            <dependencySet>
                                                <includes>
                                                    <include>${project.groupId}:${project.artifactId}</include>
                                                </includes>
                                                <outputDirectory>.</outputDirectory>
                                                <outputFileNameMapping>${project.artifactId}.jar</outputFileNameMapping>
                                            </dependencySet>
                                        </dependencySets>
                                    </inline>
                                </assembly>
                                <!--工作目录，主要用于存储日志-->
                                <workdir>/app</workdir>
                                <cmd>
                                    <!--java -jar -->
                                    <shell>java -jar /maven/${project.artifactId}.jar</shell>
                                </cmd>
                                <!--强制删除旧镜像-->
                                <cleanup>true</cleanup>
                            </build>
                            <run>
                                <!--容器名称方式-->
                                <namingStrategy>alias</namingStrategy>
                                <network>
                                    <mode>custom</mode>
                                    <name>docker-network</name>
                                    <alias>docker-network</alias>
                                </network>
                                <ports>
                                    <!--宿主机端口：容器端口-->
                                    <port>8900:8900</port>
                                </ports>
                                <!--宿主机映射-->
                                <volumes>
                                    <bind>
                                        <volume>${docker.logs}</volume>
                                    </bind>
                                </volumes>
                            </run>
                        </image>
                    </images>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>buildnumber-maven-plugin</artifactId>
                <configuration>
                    <timestampFormat>MMddHH</timestampFormat>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>create-timestamp</goal>
                        </goals>
                    </execution>
                </executions>
                <inherited>false</inherited>
            </plugin>
        </plugins>
    </build>
</project>
